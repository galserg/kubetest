apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "teamcity-agent.fullname" . }}
  labels:
    {{- include "teamcity-agent.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "teamcity-agent.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "teamcity-agent.fullname" . }}-headless
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "teamcity-agent.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "teamcity-agent.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - teamcity-agent
              topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: init
          image: busybox
          command: [ "sh", "-c", "chown -R 1000:1000 /opt/buildagent/work" ]
          volumeMounts:
            - name: data
              mountPath: /opt/buildagent/work
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: teamcity-config
          command: ["/bin/sh", "-c"]
          args: ["export AGENT_INDEX=$(python3 -c 'import os; print(os.environ[\"HOSTNAME\"].split(\"-\")[-1])');
                  export SERVER_URL=$(echo $AGENTS_CONFIG | python3 -c 'import sys, json; print(json.load(sys.stdin)[\"agents\"][0][\"server_url\"])');
                  export AGENT_TOKEN=$(echo $AGENTS_CONFIG | python3 -c 'import sys, json; print(json.load(sys.stdin)[\"agents\"][0][\"agent_token\"])');
                  export AGENT_NAME=$(python3 -c 'import os; print(os.environ[\"HOSTNAME\"])');
      /run-services.sh"]
          volumeMounts:
            - name: data
              mountPath: /opt/buildagent/work
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if not .Values.storage.enable }}
      volumes:
        - name: data
          emptyDir: {}
      {{- end }}
  {{- if .Values.storage.enable }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: {{ .Values.storage.storageClass }}
      resources:
        requests:
          storage: {{ .Values.storage.size }}
  {{- end }}
